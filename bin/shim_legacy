#!/bin/sh
#
# @grufwub
# PLATFORM: DESKTOP
# though probably works on any ¯\_(ツ)_/¯

# Readonly variables
readonly USER_DIR="$HOME/.user"
readonly USER_SCRIPTS_DIR="$USER_DIR/scripts"
readonly USER_TEMP_DIR="$USER_DIR/temp"
readonly COMPILED_EXT='out'

# Global variables
EXEC_PATH=''
REFRESH=0

#
# Usage: check_shebang <FILE_NAME> <DEFAULT_EXEC> 
# 
# Prints either the shebang in USER_SCRIPTS_DIR/FILE_NAME if
# found or DEFAULT_EXEC
check_shebang() {
  local shebang=$(cat "$USER_SCRIPTS_DIR/$1" | grep -e '^#!' | head -n 1 | sed -e 's|#!||')

  if [ "$shebang" != '' ]; then
    printf "$shebang"
  else
    printf "$2"
  fi
}

#
# Usage: c_compile <FILE_NAME> <OUTPUT_NAME>
#
# Compiles USER_SCRIPTS_DIR/FILE_NAME to USER_SCRIPTS_DIR/OUTPUT_NAME
# and makes executable, return 1 at any fails
c_compile() {
  if ( ! which gcc > /dev/null 2>&1 ); then
    printf "gcc not installed...\n"
    return 1
  fi

  printf "compiling $1...\n"
  gcc "$USER_SCRIPTS_DIR/$1" -o "$2" || return 1

  ! chmod +x "$2" && printf "failed to make $2 executable\n" && return 1
  return 0
}

#
# Usage: go_compile <FILE_NAME_NOEXT> <FILE_NAME> <OUTPUT_NAME>
#
# Compiles USER_SCRIPTS_DIR/FILE_NAME to USER_SCRIPTS_DIR/OUTPUT_NAME
# and makes executable, return 1 at any fails
go_compile() {
  if ( ! which go > /dev/null 2>&1 ); then
    printf "go not installed...\n"
    return 1
  fi

  printf "copying to temporary directory and compiling $2...\n"
  mkdir -p "$USER_TEMP_DIR/$1" > /dev/null 2>&1                     || return 1
  cp "$USER_SCRIPTS_DIR/$2" "$USER_TEMP_DIR/$1/$2" > /dev/null 2>&1 || return 1
  cd "$USER_TEMP_DIR/$1" > /dev/null 2>&1
  go build -o "$3"
  cd - > /dev/null 2>&1
  rm -rf "$USER_TEMP_DIR/$1" > /dev/null 2>&1 || printf 'failed to clean up go build directory\n'

  ! chmod +x "$3" && printf "failed to make $2 executable\n" && return 1
  return 0
}

#
# Usage: handle_filename <FILE_NAME>
#
# Looks at the file extension for FILE_NAME, performs steps if necessary
# (compiling, adding extra executables before the path name etc) and sets
# an executable string in global variable EXEC_PATH. Returns 1 at fails
# or unsupported file extension
handle_filename() {
  local name file_ext path

  name=$(printf "$1" | sed -E 's|\.[^\.]+$||')
  file_ext=$(printf "$1" | sed -e 's|\.|\n|g' | tail -n 1)

  path="$USER_SCRIPTS_DIR/$name"
  if [ "$file_ext" = 'c' ]; then
    path="$path.$COMPILED_EXT"
    [ $REFRESH -eq 1 ] && rm "$path"
    [ ! -f "$path" ] && ! c_compile "$1" "$path" && return 1
  elif [ "$file_ext" = 'py' ]; then
    path="$path.$file_ext"
    name=$(check_shebang "$1" 'python')
    path="$name $path"
  elif [ "$file_ext" = 'sh' ]; then
    path="$path.$file_ext"
    name=$(check_shebang "$1" 'sh')
    path="$name $path"
  elif [ "$file_ext" = 'go' ]; then
    path="$path.$COMPILED_EXT"
    [ $REFRESH -eq 1 ] && rm "$path"
    [ ! -f "$path" ] && ! go_compile "$name" "$1" "$path" && return 1
  else
    printf "incompatible file extension: '.$file_ext'\n"
    return 1
  fi

  EXEC_PATH="$path"
  return 0
}

#
# Usage: main <SCRIPT_NAME> <SCRIPT_ARGS>
#
# Main function: search for valid scripts in USER_SCRIPTS_DIR with name
# SCRIPT_NAME, pass onto handle_filename to deal with different file
# extensions, then execute string at EXEC_PATH with SCRIPT_ARGS
main() {
  local filename exec_path

  if [ ! -d "$USER_SCRIPTS_DIR" ] && ( ! mkdir -p "$USER_SCRIPTS_DIR" > /dev/null 2>&1 ); then
    printf "$USER_SCRIPTS_DIR does not exist and unable to create!\n"
    return 1
  fi

  [ ! -d "$USER_TEMP_DIR" ] && mkdir -p "$USER_TEMP_DIR"

  if [ "$1" = '--refresh' ]; then
    REFRESH=1
    shift 1
  fi

  filename=$(ls "$USER_SCRIPTS_DIR" | grep -e "^$1" | grep -v -E "\.$COMPILED_EXT$")
  [ "$filename" = '' ] && printf "no scripts with name '$1' found\n" && return 1
  [ "$filename" = *' '* ] && printf "multiple scripts with name $1, or name contains spaces! neither supported\n" && return 1

  handle_filename "$filename" || return 1
  shift 1

  ${EXEC_PATH} "$@"
}

[ "$#" -gt 0 ] && main "$@"